# README ‚Äì Projeto Django + API com venv + Postgres

## 1Ô∏è‚É£ Requisitos

 Python 3.11+ instalado
 Postgres instalado (ou Docker para Postgres)
 Navegador para acessar a aplica√ß√£o

## 2Ô∏è‚É£ Criar e ativar ambiente virtual

No terminal, dentro da pasta do projeto

```powershell
python -m venv venv
```

Ative o `venv`

 Windows (PowerShell)

```powershell
.Set-ExecutionPolicy -Scope Process -ExecutionPolicy Bypass
.\venv\Scripts\Activate.ps1
```



 LinuxMac

```bash
source ven/bin/activate
```

## 3Ô∏è‚É£ Instalar depend√™ncias

```bash
pip install --upgrade pip
pip install -r requirements.txt
```

## 4Ô∏è‚É£ Configurar banco Postgres

1. Crie um banco no Postgres

 Nome do banco `meuprojeto`
 Usu√°rio `admin`
 Senha `admin`

 Se quiser, voc√™ pode alterar esses valores no `settings.py` do Django.

2. Teste a conex√£o

```bash
psql -U admin -d meuprojeto
```

## 5Ô∏è‚É£ Rodar migra√ß√µes

```bash
python manage.py migrate
```

## 6Ô∏è‚É£ Criar superusu√°rio

```bash
python manage.py createsuperuser
```

## 7Ô∏è‚É£ Rodar a aplica√ß√£o

```bash
python manage.py runserver
```

 Site principal [http127.0.0.18000](http127.0.0.18000)
 Admin do Django [http127.0.0.18000admin](http127.0.0.18000admin)

## 8Ô∏è‚É£ Testar API

Se houver endpoints de API (DRF)

```
http127.0.0.18000api
```

 Substitua `api` pelo path da sua API.

## 9Ô∏è‚É£ Parar a aplica√ß√£o

 No terminal Ctrl+C
 Desativar venv

```powershell
deactivate
```

üí° Dicas

 Sempre ative o `venv` antes de rodar qualquer comando Django.
 Se o Postgres estiver em outra porta, ajuste `PORT` em `settings.py`.
